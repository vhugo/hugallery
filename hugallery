#!/usr/bin/env python

import os
import sys
import re
import errno
import argparse
import json
import csv

from wand.image import Image
from textwrap import dedent
from string import Template
from datetime import datetime

class ShowMessageAs:
  HEADER = '\033[95m'
  OKBLUE = '\033[94m'
  OKGREEN = '\033[92m'
  WARNING = '\033[93m'
  FAIL = '\033[91m'
  ENDC = '\033[0m'
  BOLD = '\033[1m'
  UNDERLINE = '\033[4m'

  @classmethod
  def clean(self, m):
    m = re.sub(r'[\n\r\s]{2,}', ' ', m, re.M)
    m = re.sub(
      r'\*\*([^\*]+)\*\*',
      r'{0}\1{1}'.format(self.BOLD, self.ENDC),
      m
    )
    return m

  @classmethod
  def error(self, m):
    sys.stderr.write(''.join([
      self.FAIL, self.BOLD, "ERROR: ", self.ENDC,
      dedent(self.clean(m)), self.ENDC, "\n"
    ]))

  @classmethod
  def warning(self, m):
    sys.stderr.write(''.join([
      self.WARNING, self.BOLD, "WARNING: ", self.ENDC,
      dedent(self.clean(m)), self.ENDC, "\n"
    ]))

  @classmethod
  def note(self, m):
    sys.stdout.write(''.join([
      self.OKBLUE, self.BOLD, "N: ", self.ENDC,
      dedent(self.clean(m)), self.ENDC, "\n"
    ]))

  @classmethod
  def normal(self, m):
    sys.stdout.write(''.join([
      dedent(self.clean(m)), self.ENDC, "\n"
    ]))

class Photo:
  order = 0
  title = ""
  description = ""
  album = ""
  album_name = ""
  album_path = ""
  thumbnail_filename = ""
  thumbnail_size = ""
  preload_filename = ""
  display_filename = ""
  display_size = ""
  original_filename = ""
  original_size = ""
  cover = False

  def __init__(self, d):
    for k, v in d.iteritems():
      if k == 'order':
        self.order = int(v)

      elif k == 'filename':
        s = re.match('^(.*)(\.(jpe?g|gif|png))$', v, re.I)
        if s:
          self.original_filename = v
          self.thumbnail_filename = "{0}-thumb{1}".format(s.group(1),s.group(2))
          self.preload_filename = "{0}-preload{1}".format(s.group(1),s.group(2))
          self.display_filename = "{0}-display{1}".format(s.group(1),s.group(2))

      else:
        self.__dict__[k] = v

  def __repr__(self):
    return repr((self.order, self.original_filename))

  def set_size(self, measure, label):

    if label == "thumbnail":
      self.thumbnail_size = measure

    elif label == "display":
      self.display_size = measure

    elif label == "original":
      self.original_size = measure

  def set_album(self, album_slug, album_name, album_path):
    self.album = album_slug
    self.album_name = album_name
    self.album_path = "{0}/".format(album_path)

  def get_dataset(self):
    dset = [];
    for key, data in sorted(self.__dict__.iteritems()):
      dset.append("{0}: {1}".format(key, data))

    return "\n".join(dset)

class Album:

  album_dir = ""
  album_name = ""
  album_name_slug = ""
  hugo_location = ""
  parent_path = ""
  max_thumbnail_size = 164
  max_size = 900
  copy_original = True
  photos = []
  gallery_dataset = ""
  total_photos_files = 0
  album_cover = None

  def __init__(self, album_dir, reprocess):
    self.album_dir = album_dir

    if reprocess:
      self.remove_photos_csv()

  def get_photos_filename(self):

    if not self.album_dir:
      self.album_dir = '.'

    photo_list = []
    for filename in os.listdir(self.album_dir):
      if re.search("\.(jpe?g|gif|png)$", filename, re.I):
        photo_list.append(filename)

    self.total_photos_files = len(photo_list)
    ShowMessageAs.note("{0} image files were found."
      .format(self.total_photos_files))

    return photo_list

  def remove_photos_csv(self):
    photos_csv = os.path.join(self.album_dir, 'photos.csv')
    os.remove(photos_csv)

  def load_config(self):

    album_conf_file = os.path.join(self.album_dir, 'album.json')
    photos_conf_file = os.path.join(self.album_dir, 'photos.csv')

    ## Load ALBUM configuration
    if os.path.isfile(album_conf_file):

      with open(album_conf_file) as data:

        try:
          config = json.load(data)

        except ValueError:
          ShowMessageAs.error("""
            Configuration file for album is incorrect.
            Please check and try again.
          """)
          sys.exit(1)

        for k, v in config.iteritems():
          self.__dict__[k] = v


    else: # If no config file is found this will create an example one

      album_conf_template = {
        'hugo_location': '/your/hugo/site/directory/',
        'album_name': 'Your Album Name',
        'max_thumbnail_size': 164,
        'max_size' : 900,
        'copy_original': True
      }

      with open(album_conf_file, 'w') as conf:
        conf.write(
          json.dumps(album_conf_template,
            indent=4, separators=(',', ': '), sort_keys=True)
        )

      ShowMessageAs.warning("""
        A brand new configuration file for **album** has been created one.
        Please edit **{0}**
      """.format(album_conf_file))
      sys.exit()

    ## Load PHOTOS configuration
    if os.path.isfile(photos_conf_file):

      with open(photos_conf_file,'rU') as csvfile:
        config = csv.DictReader(csvfile)
        for p in config:

          # Making sure there's only on cover
          if p['cover'] and not self.album_cover:
            self.album_cover = p['filename']
          else:
            p['cover'] = ""

          self.photos.append(Photo(p))

        # If no cover was assigned, first image is the cover
        if not self.album_cover:
          self.album_cover = self.photos[0].original_filename
          self.photos[0].cover = True

        self.total_photos_files = len(self.photos)
        self.photos.sort(key=lambda p: p.order)

    else: # If no config file is found this will create an example one

      photo_prop = ['cover','order', 'title', 'description', 'filename']

      with open(photos_conf_file, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=photo_prop)
        writer.writeheader()

        photos = self.get_photos_filename()
        for order, filename in enumerate(photos, 1):
          writer.writerow({
            'cover': True if order == 1 else '',
            'order': order,
            'filename': filename
          })

      ShowMessageAs.warning("""
        A brand new configuration file for **photos** has been created one.\n
        Please edit **{0}**
      """.format(photos_conf_file))
      sys.exit()

    self.check_config()
    self.normalization()

  def check_config(self):

    if not self.hugo_location \
      or not os.path.exists(self.hugo_location):
      ShowMessageAs.error("""
        Your Hugo site location is incorrect, please update
        **hugo_location** in the **album.conf**.
      """)
      sys.exit(1)

  def normalization(self):
    self.album_name_slug = re.sub('[^\w\s-]', '', self.album_name, flags=re.U).strip().lower()
    self.album_name_slug = re.sub('\s', '_', self.album_name, flags=re.U).strip().lower()

  def prepare_photos(self):

    self.static_images = os.path.join(
      self.hugo_location,
      'static/gallery/{0}/'.format(self.album_name_slug)
    )

    # Create directory if not existing
    if not os.path.exists(self.static_images):
      try:
        os.makedirs(self.static_images)
      except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(self.static_images):
          pass

    # Create the dataset
    self.gallery_dataset = os.path.join(
      self.hugo_location,
      'data/gallery/'
    )

    if not os.path.exists(self.gallery_dataset):
      try:
        os.makedirs(self.gallery_dataset)
      except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(self.gallery_dataset):
          pass

    for pnum, photo in enumerate(self.photos, 1):

      photo_filename = os.path.join(
        self.album_dir, "{0}".format(photo.original_filename))

      photo.set_album(
        self.album_name_slug,
        self.album_name,
        '/gallery/{0}'.format(self.album_name_slug)
      )

      with Image(filename=photo_filename) as img:

        #original
        if self.copy_original:
          with img.clone() as i:

            filename_original = os.path.join(
              self.static_images,
              "{0}".format(photo.original_filename)
            )

            i.save(filename=filename_original)
            photo.set_size("{0}x{1}".format(i.width, i.height), 'original')

        # Fix orientation
        orientation = img.metadata['exif:Orientation']
        rotate_coord = {
          '3': 180,
          '6': 90,
          '8': 270
        }
        if orientation in rotate_coord.keys():
          img.rotate(rotate_coord[orientation])

        # Remove all metadata from the image, to avoid issue with
        # image rotation.
        img.strip()

        # thumbnail
        with img.clone() as i:

          filename_thumbnail = os.path.join(
            self.static_images,
            "{0}".format(photo.thumbnail_filename)
          )

          if (img.height < img.width):
            height = self.max_thumbnail_size
            width = self.max_thumbnail_size * img.width / img.height
          else:
            width = self.max_thumbnail_size
            height = self.max_thumbnail_size * img.height / img.width

          i.resize( width, height )
          i.crop(
            width=self.max_thumbnail_size,
            height=self.max_thumbnail_size, gravity="center") # Perfect crop ;-)
          i.save(filename=filename_thumbnail)
          photo.set_size("{0}x{1}".format(width, height), 'thumbnail')

        # display
        with img.clone() as i:

          filename_display = os.path.join(
            self.static_images,
            "{0}".format(photo.display_filename)
          )

          if (img.height > img.width):
            height = self.max_size
            width = self.max_size * img.width / img.height
          else:
            width = self.max_size
            height = self.max_size * img.height / img.width

          i.resize( width, height )
          i.save(filename=filename_display)
          photo.set_size("{0}x{1}".format(width, height), 'display')

          # Preload
          with i.clone() as preload:
            filename_preload = os.path.join(
              self.static_images,
              "{0}".format(photo.preload_filename)
            )

            preload.compression_quality = 20
            i.save(filename=filename_preload)

      filename_dataset = os.path.join(
        self.gallery_dataset,
        "{0}-{1:0>3}.yaml".format(self.album_name_slug, photo.order)
      )

      # Create dataset files
      with open(filename_dataset, 'w') as conf:
        conf.write(photo.get_dataset())

      sys.stdout.write("\r{0} of {1} photos processed"
        .format(pnum, self.total_photos_files))
      sys.stdout.flush()
    sys.stdout.write("\n")


  def add_layouts(self):
    head = '''\
      {{/* HUGALLERY: Replace the lines bellow with your theme's header layout */}}
      <!DOCTYPE html>
      <html lang="en-US">
      <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="chrome=1">
        <meta name="HandheldFriendly" content="True">
        <meta name="MobileOptimized" content="320">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
        <base href="{{ .Site.BaseURL }}">
        <title> {{ .Title }} &middot; {{ .Site.Title }} </title>
        <link rel="canonical" href="{{ .Permalink }}">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.0/default-skin/default-skin.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.0/photoswipe.min.css">
        <link rel="stylesheet" href="{{ .Site.BaseURL }}css/gallery.photoswipe.css">
      </head>
      <body lang="en">
      {{/* HUGALLERY: Replace the lines above with your theme's header layout */}}
    '''

    foot = '''
      {{/* HUGALLERY: Replace the lines bellow with your theme's footer layout */}}

      <script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.0/photoswipe.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.0/photoswipe-ui-default.min.js"></script>
      <script src="{{ .Site.BaseURL }}js/gallery.photoswipe.js"></script>

      </body>
      </html>
      {{/* HUGALLERY: Replace the lines above with your theme's footer layout */}}
    '''

    section_gallery = '''$head
      <div class="section main">
        <div class="container">
          <div class="content">
            <div class="page-heading">Gallery</div>
            <ul>
            {{ range .Site.Data.gallery }}{{ if .cover }}<li class="my-gallery-albums"><a href="{{.album_path}}"><img src="gallery/{{.album}}/{{.thumbnail_filename}}" alt="{{.description}}" /><br />{{.album_name}}</a></li>{{ end }}{{ end }}
            </ul>
          </div>
        </div>
      </div>
    $foot'''

    hugo_layout_section = os.path.join(
      self.hugo_location,
      'layouts/section'
    )
    if not os.path.exists(hugo_layout_section):
      os.makedirs(hugo_layout_section)

    section_gallery_filename = os.path.join(
      hugo_layout_section,
      'gallery.html'
    )
    if not os.path.isfile(section_gallery_filename):
      with open(section_gallery_filename, 'w') as layout:
        layout.write(
          dedent(
            Template(section_gallery).safe_substitute(
              head=head, foot=foot)
          )
        )

    gallery_single = '''$head
      <div class="section main post">
        <div class="container">
          <div class="content">
            <div class="front-matter">
              <div class="title-container">
                <div class="page-heading">
                  <a href="{{ .Permalink }}">{{ .Title }}</a>
                </div>
              </div>
            </div>
            <div class="my-gallery" itemscope itemtype="http://schema.org/ImageGallery">

            {{ $album_path := .RelPermalink }}
            {{ range .Site.Data.gallery }}
              {{ if eq .album_path $album_path }}
                <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
                  <a href="gallery/{{.album}}/{{.display_filename}}" itemprop="contentUrl" data-size="{{.display_size}}" data-preload="gallery/{{.album}}/{{.preload_filename}}">
                    <img src="gallery/{{.album}}/{{.thumbnail_filename}}" itemprop="thumbnail" alt="{{.description}}" />
                  </a>
                  <figcaption itemprop="caption description">{{.title}}</figcaption>
                </figure>
              {{ end }}
            {{ end }}

            </div>
            <br />
            <p><a href="/gallery/">Back to gallery</a></p>
          </div>
        </div>
      </div>

      <!-- Root element of PhotoSwipe. Must have class pswp. -->
      <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

        <!-- Background of PhotoSwipe.
             It's a separate element, as animating opacity is faster than rgba(). -->
        <div class="pswp__bg"></div>

        <!-- Slides wrapper with overflow:hidden. -->
        <div class="pswp__scroll-wrap">

          <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
          <!-- don't modify these 3 pswp__item elements, data is added later on. -->
          <div class="pswp__container">
              <div class="pswp__item"></div>
              <div class="pswp__item"></div>
              <div class="pswp__item"></div>
          </div>
          <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
          <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

              <!--  Controls are self-explanatory. Order can be changed. -->
              <div class="pswp__counter"></div>

              <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

              <button class="pswp__button pswp__button--share" title="Share"></button>

              <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

              <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

              <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
              <!-- element will get class pswp__preloader--active when preloader is running -->
              <div class="pswp__preloader">
                <div class="pswp__preloader__icn">
                  <div class="pswp__preloader__cut">
                    <div class="pswp__preloader__donut"></div>
                  </div>
                </div>
              </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

          </div>

        </div>

      </div>
    $foot'''

    hugo_layout_gallery = os.path.join(
      self.hugo_location,
      'layouts/gallery'
    )
    if not os.path.exists(hugo_layout_gallery):
      os.makedirs(hugo_layout_gallery)

    gallery_single_filename = os.path.join(
      hugo_layout_gallery,
      'single.html'
    )
    if not os.path.isfile(gallery_single_filename):
      with open(gallery_single_filename, 'w') as layout:
        layout.write(
          dedent(
            Template(gallery_single).safe_substitute(
              head=head, foot=foot)
          )
        )

  def add_statics(self):

    css = '''\
      .my-gallery {
        width: 100%;
        float: left;
        margin-bottom:30px;
      }
      .my-gallery img {
        width: 100%;
        height: auto;
      }
      .my-gallery li, .my-gallery figure {
        display: block;
        float: left;
        margin: 0;
        width: 164px;
        height: 164px;
      }
      .my-gallery figcaption {
        display: none;
      }
    '''

    hugo_css = os.path.join(self.hugo_location, 'static/css')
    if not os.path.exists(hugo_css):
      os.makedirs(hugo_css)

    hugo_css_filename = os.path.join(hugo_css, 'gallery.photoswipe.css')
    if not os.path.isfile(hugo_css_filename):
      with open(hugo_css_filename, 'w') as static:
        static.write(dedent(css))

    js = '''\
      var initPhotoSwipeFromDOM = function(gallerySelector) {

        var parseThumbnailElements = function(el) {
          var thumbElements = el.childNodes,
            numNodes = thumbElements.length,
            items = [],
            el,
            childElements,
            thumbnailEl,
            size,
            item;

          for(var i = 0; i < numNodes; i++) {
            el = thumbElements[i];

            // include only element nodes
            if(el.nodeType !== 1) {
              continue;
            }

            linkEl = el.children[0]; // <a> element
            childElements = linkEl.children;

            size = linkEl.getAttribute('data-size').split('x');

            // create slide object
            item = {
              src: linkEl.getAttribute('href'),
              w: parseInt(size[0], 10),
              h: parseInt(size[1], 10),
              author: linkEl.getAttribute('data-author')
            };

            item.el = el; // save link to element for getThumbBoundsFn

            if(childElements.length > 0) {
              if(childElements.length > 1) {
                item.title = childElements[1].innerHTML; // caption (contents of figure)
              }
            }

            // Preload photo
            var preloadSrc = linkEl.getAttribute('data-preload');
            if(preloadSrc) {
              item.msrc = preloadSrc;
            }

            items.push(item);
          }

          return items;
        };

        // find nearest parent element
        var closest = function closest(el, fn) {
          return el && ( fn(el) ? el : closest(el.parentNode, fn) );
        };

        var onThumbnailsClick = function(e) {
          e = e || window.event;
          e.preventDefault ? e.preventDefault() : e.returnValue = false;

          var eTarget = e.target || e.srcElement;

          var clickedListItem = closest(eTarget, function(el) {
            return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
          });

          if(!clickedListItem) {
            return;
          }

          var clickedGallery = clickedListItem.parentNode;

          var childNodes = clickedListItem.parentNode.childNodes,
            numChildNodes = childNodes.length,
            nodeIndex = 0,
            index;

          for (var i = 0; i < numChildNodes; i++) {
            if(childNodes[i].nodeType !== 1) {
              continue;
            }

            if(childNodes[i] === clickedListItem) {
              index = nodeIndex;
              break;
            }
            nodeIndex++;
          }

          if(index >= 0) {
            openPhotoSwipe( index, clickedGallery, true );
          }
          return false;
        };

        var photoswipeParseHash = function() {
          var hash = window.location.hash.substring(1),
          params = {};

          if(hash.length < 5) {
            return params;
          }

          var vars = hash.split('&');
          for (var i = 0; i < vars.length; i++) {
            if(!vars[i]) {
              continue;
            }
            var pair = vars[i].split('=');
            if(pair.length < 2) {
              continue;
            }
            params[pair[0]] = pair[1];
          }

          if(params.gid) {
            params.gid = parseInt(params.gid, 10);
          }

          return params;
        };

        var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
          var pswpElement = document.querySelectorAll('.pswp')[0],
            gallery,
            options,
            items;

          items = parseThumbnailElements(galleryElement);

          // define options (if needed)
          options = {

            galleryUID: galleryElement.getAttribute('data-pswp-uid'),

            getThumbBoundsFn: function(index) {
              // See Options -> getThumbBoundsFn section of documentation for more info
              var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                rect = thumbnail.getBoundingClientRect();

              return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
            },

            addCaptionHTMLFn: function(item, captionEl, isFake) {
              if(!item.title) {
                captionEl.children[0].innerText = '';
                return false;
              }
              captionEl.children[0].innerHTML = item.title;
              return true;
            },
            shareButtons: [
              {id:'facebook', label:'Share on Facebook', url:'https://www.facebook.com/sharer/sharer.php?u={{url}}'},
              {id:'twitter', label:'Tweet', url:'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'},
              {id:'pinterest', label:'Pin it', url:'http://www.pinterest.com/pin/create/button/?url={{url}}&media={{image_url}}&description={{text}}'},
              {id:'download', label:'Download image', url:'{{raw_image_url}}', download:true}
            ]
          };

          // PhotoSwipe opened from URL
          if(fromURL) {
            if(options.galleryPIDs) {
              // parse real index when custom PIDs are used
              // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
              for(var j = 0; j < items.length; j++) {
                if(items[j].pid == index) {
                  options.index = j;
                  break;
                }
              }
            } else {
              // in URL indexes start from 1
              options.index = parseInt(index, 10) - 1;
            }
          } else {
            options.index = parseInt(index, 10);
          }

          // exit if index not found
          if( isNaN(options.index) ) {
            return;
          }

          if(disableAnimation) {
            options.showAnimationDuration = 0;
            options.hideAnimationDuration = 0;
          }

          // Pass data to PhotoSwipe and initialize it
          gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
          gallery.init();
        };

        // loop through all gallery elements and bind events
        var galleryElements = document.querySelectorAll( gallerySelector );

        for(var i = 0, l = galleryElements.length; i < l; i++) {
          galleryElements[i].setAttribute('data-pswp-uid', i+1);
          galleryElements[i].onclick = onThumbnailsClick;
        }

        // Parse URL and open gallery if it contains #&pid=3&gid=1
        var hashData = photoswipeParseHash();
        if(hashData.pid && hashData.gid) {
          openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
        }
      };

      // execute above function
      initPhotoSwipeFromDOM('.my-gallery');
    '''

    hugo_js = os.path.join(self.hugo_location, 'static/js')
    if not os.path.exists(hugo_js):
      os.makedirs(hugo_js)

    hugo_js_filename = os.path.join(hugo_js, 'gallery.photoswipe.js')
    if not os.path.isfile(hugo_js_filename):
      with open(hugo_js_filename, 'w') as static:
        static.write(dedent(js))

  def add_content(self):
    content = '''\
      +++
      date = "{0}"
      draft = true
      title = "{1}"

      +++

    '''.format(datetime.now().isoformat(), self.album_name)

    hugo_content = os.path.join(self.hugo_location, 'content/gallery')
    if not os.path.exists(hugo_content):
      os.makedirs(hugo_content)

    hugo_content_filename = os.path.join(
      hugo_content,
      '{0}.md'.format(self.album_name_slug)
    )
    if not os.path.isfile(hugo_content_filename):
      with open(hugo_content_filename, 'w') as c:
        c.write(dedent(content))

  def add_resources(self):
    self.add_layouts()
    self.add_statics()
    self.add_content()

def main():

  parser = argparse.ArgumentParser(
    description='Generate a static photo gallery for Hugo (//gohugo.io/)',
    prog='hugallery',
    usage='usage: %(prog)s /You-Album-Path/'
  )
  parser.add_argument(
    '-r', '--reprocess',
    help='Reprocess photos',
    action="store_true"
  )
  parser.add_argument(
    'album_dir',
    nargs='?',
    help='Diretory with all photos to be used in the gallery album.'
  )
  args = parser.parse_args()

  if args.album_dir:
    album = Album(args.album_dir, args.reprocess)
    album.load_config()
    album.prepare_photos()
    album.add_resources()
  else:
    parser.print_help()

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    ShowMessageAs.error("""
      Program interrupted, part of the process may have already been done
    """)

